// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"fiber-crud/dal/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newUserx(db *gorm.DB) userx {
	_userx := userx{}

	_userx.userxDo.UseDB(db)
	_userx.userxDo.UseModel(&model.Userx{})

	tableName := _userx.userxDo.TableName()
	_userx.ALL = field.NewField(tableName, "*")
	_userx.ID = field.NewInt64(tableName, "id")
	_userx.Name = field.NewString(tableName, "name")
	_userx.Email = field.NewString(tableName, "email")
	_userx.Age = field.NewInt64(tableName, "age")
	_userx.Birthday = field.NewTime(tableName, "birthday")
	_userx.MemberNumber = field.NewString(tableName, "member_number")
	_userx.ActivatedAt = field.NewTime(tableName, "activated_at")
	_userx.CreatedAt = field.NewTime(tableName, "created_at")
	_userx.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userx.Tt = field.NewString(tableName, "tt")

	_userx.fillFieldMap()

	return _userx
}

type userx struct {
	userxDo

	ALL          field.Field
	ID           field.Int64
	Name         field.String
	Email        field.String
	Age          field.Int64
	Birthday     field.Time
	MemberNumber field.String
	ActivatedAt  field.Time
	CreatedAt    field.Time
	UpdatedAt    field.Time
	Tt           field.String

	fieldMap map[string]field.Expr
}

func (u userx) Table(newTableName string) *userx {
	u.userxDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userx) As(alias string) *userx {
	u.userxDo.DO = *(u.userxDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userx) updateTableName(table string) *userx {
	u.ALL = field.NewField(table, "*")
	u.ID = field.NewInt64(table, "id")
	u.Name = field.NewString(table, "name")
	u.Email = field.NewString(table, "email")
	u.Age = field.NewInt64(table, "age")
	u.Birthday = field.NewTime(table, "birthday")
	u.MemberNumber = field.NewString(table, "member_number")
	u.ActivatedAt = field.NewTime(table, "activated_at")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.Tt = field.NewString(table, "tt")

	u.fillFieldMap()

	return u
}

func (u *userx) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userx) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["email"] = u.Email
	u.fieldMap["age"] = u.Age
	u.fieldMap["birthday"] = u.Birthday
	u.fieldMap["member_number"] = u.MemberNumber
	u.fieldMap["activated_at"] = u.ActivatedAt
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["tt"] = u.Tt
}

func (u userx) clone(db *gorm.DB) userx {
	u.userxDo.ReplaceDB(db)
	return u
}

type userxDo struct{ gen.DO }

func (u userxDo) Debug() *userxDo {
	return u.withDO(u.DO.Debug())
}

func (u userxDo) WithContext(ctx context.Context) *userxDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userxDo) Clauses(conds ...clause.Expression) *userxDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userxDo) Returning(value interface{}, columns ...string) *userxDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userxDo) Not(conds ...gen.Condition) *userxDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userxDo) Or(conds ...gen.Condition) *userxDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userxDo) Select(conds ...field.Expr) *userxDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userxDo) Where(conds ...gen.Condition) *userxDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userxDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userxDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userxDo) Order(conds ...field.Expr) *userxDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userxDo) Distinct(cols ...field.Expr) *userxDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userxDo) Omit(cols ...field.Expr) *userxDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userxDo) Join(table schema.Tabler, on ...field.Expr) *userxDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userxDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userxDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userxDo) RightJoin(table schema.Tabler, on ...field.Expr) *userxDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userxDo) Group(cols ...field.Expr) *userxDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userxDo) Having(conds ...gen.Condition) *userxDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userxDo) Limit(limit int) *userxDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userxDo) Offset(offset int) *userxDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userxDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userxDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userxDo) Unscoped() *userxDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userxDo) Create(values ...*model.Userx) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userxDo) CreateInBatches(values []*model.Userx, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userxDo) Save(values ...*model.Userx) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userxDo) First() (*model.Userx, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userx), nil
	}
}

func (u userxDo) Take() (*model.Userx, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userx), nil
	}
}

func (u userxDo) Last() (*model.Userx, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userx), nil
	}
}

func (u userxDo) Find() ([]*model.Userx, error) {
	result, err := u.DO.Find()
	return result.([]*model.Userx), err
}

func (u userxDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Userx, err error) {
	buf := make([]*model.Userx, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userxDo) FindInBatches(result *[]*model.Userx, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userxDo) Attrs(attrs ...field.AssignExpr) *userxDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userxDo) Assign(attrs ...field.AssignExpr) *userxDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userxDo) Joins(field field.RelationField) *userxDo {
	return u.withDO(u.DO.Joins(field))
}

func (u userxDo) Preload(field field.RelationField) *userxDo {
	return u.withDO(u.DO.Preload(field))
}

func (u userxDo) FirstOrInit() (*model.Userx, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userx), nil
	}
}

func (u userxDo) FirstOrCreate() (*model.Userx, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userx), nil
	}
}

func (u userxDo) FindByPage(offset int, limit int) (result []*model.Userx, count int64, err error) {
	if limit <= 0 {
		count, err = u.Count()
		return
	}

	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userxDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u *userxDo) withDO(do gen.Dao) *userxDo {
	u.DO = *do.(*gen.DO)
	return u
}
