// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"fiber-crud/dal/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newAddress(db *gorm.DB) address {
	_address := address{}

	_address.addressDo.UseDB(db)
	_address.addressDo.UseModel(&model.Address{})

	tableName := _address.addressDo.TableName()
	_address.ALL = field.NewField(tableName, "*")
	_address.AddressID = field.NewString(tableName, "AddressId")
	_address.Address = field.NewString(tableName, "Address")
	_address.Lat = field.NewField(tableName, "Lat")
	_address.Long = field.NewField(tableName, "Long")
	_address.CreateDate = field.NewTime(tableName, "CreateDate")
	_address.CreateBy = field.NewString(tableName, "CreateBy")
	_address.UpdateDate = field.NewTime(tableName, "UpdateDate")
	_address.UpdateBy = field.NewString(tableName, "UpdateBy")
	_address.IsActive = field.NewBool(tableName, "IsActive")
	_address.Price = field.NewField(tableName, "Price")

	_address.fillFieldMap()

	return _address
}

type address struct {
	addressDo

	ALL        field.Field
	AddressID  field.String
	Address    field.String
	Lat        field.Field
	Long       field.Field
	CreateDate field.Time
	CreateBy   field.String
	UpdateDate field.Time
	UpdateBy   field.String
	IsActive   field.Bool
	Price      field.Field

	fieldMap map[string]field.Expr
}

func (a address) Table(newTableName string) *address {
	a.addressDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a address) As(alias string) *address {
	a.addressDo.DO = *(a.addressDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *address) updateTableName(table string) *address {
	a.ALL = field.NewField(table, "*")
	a.AddressID = field.NewString(table, "AddressId")
	a.Address = field.NewString(table, "Address")
	a.Lat = field.NewField(table, "Lat")
	a.Long = field.NewField(table, "Long")
	a.CreateDate = field.NewTime(table, "CreateDate")
	a.CreateBy = field.NewString(table, "CreateBy")
	a.UpdateDate = field.NewTime(table, "UpdateDate")
	a.UpdateBy = field.NewString(table, "UpdateBy")
	a.IsActive = field.NewBool(table, "IsActive")
	a.Price = field.NewField(table, "Price")

	a.fillFieldMap()

	return a
}

func (a *address) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *address) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["AddressId"] = a.AddressID
	a.fieldMap["Address"] = a.Address
	a.fieldMap["Lat"] = a.Lat
	a.fieldMap["Long"] = a.Long
	a.fieldMap["CreateDate"] = a.CreateDate
	a.fieldMap["CreateBy"] = a.CreateBy
	a.fieldMap["UpdateDate"] = a.UpdateDate
	a.fieldMap["UpdateBy"] = a.UpdateBy
	a.fieldMap["IsActive"] = a.IsActive
	a.fieldMap["Price"] = a.Price
}

func (a address) clone(db *gorm.DB) address {
	a.addressDo.ReplaceDB(db)
	return a
}

type addressDo struct{ gen.DO }

func (a addressDo) Debug() *addressDo {
	return a.withDO(a.DO.Debug())
}

func (a addressDo) WithContext(ctx context.Context) *addressDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a addressDo) Clauses(conds ...clause.Expression) *addressDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a addressDo) Returning(value interface{}, columns ...string) *addressDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a addressDo) Not(conds ...gen.Condition) *addressDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a addressDo) Or(conds ...gen.Condition) *addressDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a addressDo) Select(conds ...field.Expr) *addressDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a addressDo) Where(conds ...gen.Condition) *addressDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a addressDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *addressDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a addressDo) Order(conds ...field.Expr) *addressDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a addressDo) Distinct(cols ...field.Expr) *addressDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a addressDo) Omit(cols ...field.Expr) *addressDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a addressDo) Join(table schema.Tabler, on ...field.Expr) *addressDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a addressDo) LeftJoin(table schema.Tabler, on ...field.Expr) *addressDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a addressDo) RightJoin(table schema.Tabler, on ...field.Expr) *addressDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a addressDo) Group(cols ...field.Expr) *addressDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a addressDo) Having(conds ...gen.Condition) *addressDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a addressDo) Limit(limit int) *addressDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a addressDo) Offset(offset int) *addressDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a addressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *addressDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a addressDo) Unscoped() *addressDo {
	return a.withDO(a.DO.Unscoped())
}

func (a addressDo) Create(values ...*model.Address) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a addressDo) CreateInBatches(values []*model.Address, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a addressDo) Save(values ...*model.Address) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a addressDo) First() (*model.Address, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Address), nil
	}
}

func (a addressDo) Take() (*model.Address, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Address), nil
	}
}

func (a addressDo) Last() (*model.Address, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Address), nil
	}
}

func (a addressDo) Find() ([]*model.Address, error) {
	result, err := a.DO.Find()
	return result.([]*model.Address), err
}

func (a addressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Address, err error) {
	buf := make([]*model.Address, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a addressDo) FindInBatches(result *[]*model.Address, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a addressDo) Attrs(attrs ...field.AssignExpr) *addressDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a addressDo) Assign(attrs ...field.AssignExpr) *addressDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a addressDo) Joins(field field.RelationField) *addressDo {
	return a.withDO(a.DO.Joins(field))
}

func (a addressDo) Preload(field field.RelationField) *addressDo {
	return a.withDO(a.DO.Preload(field))
}

func (a addressDo) FirstOrInit() (*model.Address, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Address), nil
	}
}

func (a addressDo) FirstOrCreate() (*model.Address, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Address), nil
	}
}

func (a addressDo) FindByPage(offset int, limit int) (result []*model.Address, count int64, err error) {
	if limit <= 0 {
		count, err = a.Count()
		return
	}

	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a addressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a *addressDo) withDO(do gen.Dao) *addressDo {
	a.DO = *do.(*gen.DO)
	return a
}
